% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/base.R
\name{keccak}
\alias{keccak}
\title{Keccak Cryptographic Hash Algorithms}
\usage{
keccak(x, bits = 256L, convert = TRUE, file)
}
\arguments{
\item{x}{object to hash. A character string or raw vector (without
attributes) is hashed 'as is'. All other objects are stream hashed using
R serialization (but without allocation of the serialized object).}

\item{bits}{[default 256L] output size of the returned hash. Must be one of
224, 256, 384 or 512.}

\item{convert}{[default TRUE] if TRUE, the hash is converted to its hex
representation as a character string, if FALSE, output directly as a raw
vector, or if NA, a vector of (32-bit) integer values.}

\item{file}{character file name / path. If specified, 'x' is ignored. The
file is stream hashed, thus capable of handling files larger than memory.}
}
\value{
A character string, raw or integer vector depending on 'convert'.
}
\description{
Returns a Keccak hash of the supplied object or file.
}
\section{R Serialization Stream Hashing}{

    
    Where this is used, serialization is always version 3 big-endian
    represenation and the headers (containing R version and native encoding
    information) are skipped to ensure portability across platforms.
}

\examples{
# Keccak-256 hash as character string:
keccak("secret base")

# Keccak-256 hash as raw vector:
keccak("secret base", convert = FALSE)

# Keccak-224 hash as character string:
keccak("secret base", bits = 224)

# Keccak-384 hash as character string:
keccak("secret base", bits = 384)

# Keccak-512 hash as character string:
keccak("secret base", bits = 512)

# Keccak-256 hash a file:
file <- tempfile(); cat("secret base", file = file)
keccak(file = file)
unlink(file)

}
\references{
Keccak is the underlying algorithm for SHA-3, and is identical
    apart from the value of the padding parameter.
    
    The Keccak algorithm was designed by G. Bertoni, J. Daemen, M. Peeters
    and G. Van Assche.
    
    This implementation is based on one by 'The Mbed TLS Contributors' under
    the 'Mbed TLS' Trusted Firmware Project at
    \url{https://www.trustedfirmware.org/projects/mbed-tls}.
}
