% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/base.R
\name{sha3}
\alias{sha3}
\title{Cryptographic Hashing Using the SHA-3 Algorithm}
\usage{
sha3(x, size = 256L, convert = TRUE)
}
\arguments{
\item{x}{an object.}

\item{size}{[default 256L] integer output size (bits) of the returned hash -
uses the relevant SHA-3 algorithm if one of 224, 256, 384 or 512, or else
the SHAKE256 algorithm as an extendable-output function (XOF) for
arbitrary bit lengths. The supplied value must be at least 8.}

\item{convert}{[default TRUE] whether to output the hash as a character
string or, if FALSE, a raw vector.}
}
\value{
A raw vector or character string depending on 'convert'.
}
\description{
Returns a SHA-3 hash of the supplied R object. This implementation uses code
    from the Mbed TLS library, under the Trusted Firmware Project.
}
\details{
For argument 'x', a scalar string or raw vector (with no attributes)
    is hashed directly. All other objects are first serialised using R
    serialisation version 3, big-endian representation, with the
    serialization header stripped (for portability across R installations as
    this contains the R version number).

    The result of hashing is always a byte sequence, which is converted to a
    character string hex representation if 'convert' is TRUE, or returned as
    a raw vector if 'convert' is FALSE.
    
    To hash to an integer value (for example to supply as a random seed to
    R's pseudo random number generators), set 'size' to 32 and 'convert' to
    FALSE, and pass the resulting output to \code{\link{read_integer}}.
}
\examples{
# SHA3-256 hash as character string:
sha3("secret base")

# SHA3-256 hash as raw vector:
sha3("secret base", convert = FALSE)

# SHA3-224 hash as character string:
sha3("secret base", size = 224)

# SHA3-384 hash as character string:
sha3("secret base", size = 384)

# SHA3-512 hash as character string:
sha3("secret base", size = 512)

# SHAKE256 hash to integer:
hash <- sha3("secret base", size = 32L, convert = FALSE)
hash
read_integer(hash)

}
